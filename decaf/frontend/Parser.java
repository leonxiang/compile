//### This file created by BYACC 1.8(/Java extension  1.13)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//###           14 Sep 06  -- Keltin Leung-- ReduceListener support, eliminate underflow report in error recovery
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 11 "Parser.y"
package decaf.frontend;

import decaf.tree.Tree;
import decaf.tree.Tree.*;
import decaf.error.*;
import java.util.*;
//#line 25 "Parser.java"
interface ReduceListener {
  public boolean onReduce(String rule);
}




public class Parser
             extends BaseParser
             implements ReduceListener
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

ReduceListener reduceListener = null;
void yyclearin ()       {yychar = (-1);}
void yyerrok ()         {yyerrflag=0;}
void addReduceListener(ReduceListener l) {
  reduceListener = l;}


//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//## **user defined:SemValue
String   yytext;//user variable to return contextual strings
SemValue yyval; //used to return semantic vals from action routines
SemValue yylval;//the 'lval' (result) I got from yylex()
SemValue valstk[] = new SemValue[YYSTACKSIZE];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
final void val_init()
{
  yyval=new SemValue();
  yylval=new SemValue();
  valptr=-1;
}
final void val_push(SemValue val)
{
  try {
    valptr++;
    valstk[valptr]=val;
  }
  catch (ArrayIndexOutOfBoundsException e) {
    int oldsize = valstk.length;
    int newsize = oldsize*2;
    SemValue[] newstack = new SemValue[newsize];
    System.arraycopy(valstk,0,newstack,0,oldsize);
    valstk = newstack;
    valstk[valptr]=val;
  }
}
final SemValue val_pop()
{
  return valstk[valptr--];
}
final void val_drop(int cnt)
{
  valptr -= cnt;
}
final SemValue val_peek(int relative)
{
  return valstk[valptr-relative];
}
//#### end semantic value section ####
public final static short VOID=257;
public final static short BOOL=258;
public final static short INT=259;
public final static short STRING=260;
public final static short CLASS=261;
<<<<<<< HEAD
public final static short NULL=262;
public final static short EXTENDS=263;
public final static short THIS=264;
public final static short WHILE=265;
public final static short FOR=266;
public final static short IF=267;
public final static short ELSE=268;
public final static short RETURN=269;
public final static short BREAK=270;
public final static short NEW=271;
public final static short PRINT=272;
public final static short READ_INTEGER=273;
public final static short READ_LINE=274;
public final static short LITERAL=275;
public final static short IDENTIFIER=276;
public final static short AND=277;
public final static short OR=278;
public final static short STATIC=279;
public final static short INSTANCEOF=280;
public final static short LESS_EQUAL=281;
public final static short GREATER_EQUAL=282;
public final static short EQUAL=283;
public final static short NOT_EQUAL=284;
public final static short UMINUS=285;
public final static short EMPTY=286;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    1,    3,    4,    5,    5,    5,    5,    5,
    5,    2,    6,    6,    7,    7,    7,    9,    9,   10,
   10,    8,    8,   11,   12,   12,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   14,   14,   14,   24,   24,
   21,   21,   23,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   26,
   26,   25,   25,   27,   27,   16,   17,   20,   15,   28,
   28,   18,   18,   19,
};
final static short yylen[] = {                            2,
    1,    2,    1,    2,    2,    1,    1,    1,    1,    2,
    3,    6,    2,    0,    2,    2,    0,    1,    0,    3,
    1,    7,    6,    3,    2,    0,    1,    2,    1,    1,
    1,    2,    2,    2,    1,    3,    1,    0,    2,    0,
    2,    4,    5,    1,    1,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    2,    2,    3,    3,    1,    4,    5,    6,    5,    1,
    1,    1,    0,    3,    1,    5,    9,    1,    6,    2,
    0,    2,    1,    4,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    3,    0,    2,    0,    0,   13,   17,
    0,    7,    8,    6,    9,    0,    0,   12,   15,    0,
    0,   16,   10,    0,    4,    0,    0,    0,    0,   11,
    0,   21,    0,    0,    0,    0,    5,    0,    0,    0,
   26,   23,   20,   22,    0,   71,   65,    0,    0,    0,
    0,   78,    0,    0,    0,    0,   70,    0,    0,    0,
    0,   24,   27,   35,   25,    0,   29,   30,   31,    0,
    0,    0,    0,    0,    0,    0,   46,    0,    0,    0,
   44,    0,   45,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,   32,   33,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   63,   64,    0,    0,   60,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   66,    0,    0,   84,    0,
    0,   42,    0,    0,   76,    0,    0,   67,    0,    0,
   69,   43,    0,    0,   79,   68,    0,   80,    0,   77,
};
final static short yydgoto[] = {                          2,
    3,    4,   63,   20,   33,    8,   11,   22,   34,   35,
   64,   45,   65,   66,   67,   68,   69,   70,   71,   72,
   81,   74,   83,   76,  153,   77,  121,  165,
};
final static short yysindex[] = {                      -247,
 -257,    0, -247,    0, -242,    0, -251,  -67,    0,    0,
  -76,    0,    0,    0,    0, -217, -214,    0,    0,   24,
  -88,    0,    0,  -87,    0,   45,   -2,   54, -214,    0,
 -214,    0,  -85,   56,   63,   68,    0,  -15, -214,  -15,
    0,    0,    0,    0,   -9,    0,    0,   70,   72,   75,
  495,    0, -183,   81,   88,   90,    0,   91,  495,  495,
  458,    0,    0,    0,    0,   73,    0,    0,    0,   74,
   76,   78,   84,  496,    0, -142,    0,  495,  495,  495,
    0,  496,    0,  107,   48,  495,  116,  123,  495,  -38,
  -38, -128,  307,    0,    0,    0,    0,  495,  495,  495,
  495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
  495,    0,  495,  126,  366,  108,  378,  129,  541,  496,
  -11,    0,    0,  402,  131,    0,  496,  567,  555,   -5,
   -5,  579,  579,  -19,  -19,  -38,  -38,  -38,   -5,   -5,
  413,  495,   15,  495,   15,    0,  434,  495,    0, -103,
  495,    0,  133,  132,    0,  470,  -89,    0,  496,  145,
    0,    0,  495,   15,    0,    0,  146,    0,   15,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,  193,    0,   83,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  140,    0,    0,  160,    0,
  160,    0,    0,    0,  163,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -58,    0,    0,    0,    0,    0,
  -57,    0,    0,    0,    0,    0,    0,    0,  -71,  -71,
  -71,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  517,    0,   58,    0,    0,  -71,  -58,  -71,
    0,  148,    0,    0,    0,  -71,    0,    0,  -71,   82,
  109,    0,    0,    0,    0,    0,    0,  -71,  -71,  -71,
  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
  -71,    0,  -71,   20,    0,    0,    0,    0,  -71,   10,
    0,    0,    0,    0,    0,    0,  -30,   29,  -24,   99,
  288,   43,  176,  665,  747,  118,  153,  268,  594,  610,
    0,  -32,  -58,  -71,  -58,    0,    0,  -71,    0,    0,
  -71,    0,    0,  167,    0,    0,  -33,    0,   27,    0,
    0,    0,  -31,  -58,    0,    0,    0,    0,  -58,    0,
};
final static short yygindex[] = {                         0,
    0,  206,  199,   67,    5,    0,    0,    0,  183,    0,
   12,    0, -130,  -74,    0,    0,    0,    0,    0,    0,
  592,  822,  620,    0,    0,    0,   79,    0,
};
final static int YYTABLESIZE=1031;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         81,
   38,   83,   27,   27,  116,   27,   81,  112,   73,   38,
   36,   81,  155,    1,  157,   21,   59,  109,    5,   59,
    7,   24,  107,   60,    9,   81,  112,  108,   36,  149,
   61,  109,  148,  168,   59,   59,  107,  105,  170,  106,
  112,  108,   12,   13,   14,   15,   16,   60,   18,   42,
   75,   44,  113,   75,   61,   10,   41,   85,   23,   59,
   41,   41,   41,   41,   41,   41,   41,   74,   59,   58,
   74,  113,   58,   12,   13,   14,   15,   16,   41,   41,
   41,   41,   25,   52,   29,  113,   52,   58,  167,   81,
   30,   81,   84,   31,   45,   32,   38,   32,   37,   45,
   45,   52,   45,   45,   45,   43,   39,   41,   40,   78,
   41,   79,   41,   41,   80,   62,   37,   45,   61,   45,
   86,   58,   61,   61,   61,   61,   61,   87,   61,   88,
   89,   94,   95,  114,   96,   52,   97,   41,  119,   56,
   61,   61,   56,   61,   98,   62,  118,  125,   45,   62,
   62,   62,   62,   62,   49,   62,  122,   56,   49,   49,
   49,   49,   49,  123,   49,  142,  144,   62,   62,  146,
   62,  151,  160,  162,   61,  148,   49,   49,  164,   49,
   12,   13,   14,   15,   16,  166,  169,   26,   28,   50,
   37,   56,    1,   50,   50,   50,   50,   50,    5,   50,
   19,   62,   17,   18,   40,   14,   82,   72,    6,   19,
   49,   50,   50,   36,   50,    0,   53,   40,   40,   53,
  154,    0,    0,   81,   81,   81,   81,   81,   81,    0,
   81,   81,   81,   81,   53,   81,   81,   81,   81,   81,
   81,   81,   81,   40,   40,   50,   81,   12,   13,   14,
   15,   16,   46,   59,   47,   48,   49,   50,    0,   51,
   52,   53,   54,   55,   56,   57,    0,    0,   53,    0,
   58,   12,   13,   14,   15,   16,   46,    0,   47,   48,
   49,   50,    0,   51,   52,   53,   54,   55,   56,   57,
    0,    0,    0,    0,   58,    0,   41,   41,    0,    0,
   41,   41,   41,   41,   51,   58,   58,    0,   51,   51,
   51,   51,   51,    0,   51,    0,    0,    0,    0,   52,
   52,    0,    0,    0,    0,    0,   51,   51,   57,   51,
    0,   57,    0,    0,   45,   45,    0,    0,   45,   45,
   45,   45,    0,  109,    0,    0,   57,  126,  107,  105,
    0,  106,  112,  108,    0,    0,    0,    0,   61,   61,
   51,    0,   61,   61,   61,   61,  111,    0,  110,    0,
    0,    0,    0,    0,    0,   56,   56,    0,    0,    0,
   57,   56,   56,    0,    0,   62,   62,    0,    0,   62,
   62,   62,   62,    0,   49,   49,    0,  113,   49,   49,
   49,   49,  109,    0,    0,    0,  143,  107,  105,    0,
  106,  112,  108,    0,  109,    0,    0,    0,  145,  107,
  105,    0,  106,  112,  108,  111,    0,  110,    0,   50,
   50,    0,    0,   50,   50,   50,   50,  111,  109,  110,
    0,    0,    0,  107,  105,  150,  106,  112,  108,  109,
    0,    0,   53,   53,  107,  105,  113,  106,  112,  108,
    0,  111,    0,  110,    0,    0,    0,    0,  113,    0,
  109,    0,  111,    0,  110,  107,  105,    0,  106,  112,
  108,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   60,    0,  113,  111,    0,  110,    0,   61,    0,    0,
    0,    0,   59,  113,    0,  152,  109,    0,    0,    0,
    0,  107,  105,    0,  106,  112,  108,    0,    0,    0,
    0,    0,    0,    0,  113,    0,  158,   60,  163,  111,
    0,  110,  109,    0,   61,    0,    0,  107,  105,   59,
  106,  112,  108,    0,   51,   51,    0,    0,   51,   51,
   51,   51,    0,   44,    0,  111,    0,  110,   44,   44,
  113,   44,   44,   44,   57,   57,    0,    0,    0,    0,
   57,   57,    0,   60,    0,    0,   44,    0,   44,    0,
   61,    0,    0,   99,  100,   59,  113,  101,  102,  103,
  104,  109,    0,    0,    0,    0,  107,  105,    0,  106,
  112,  108,    0,  109,    0,    0,    0,   44,  107,  105,
    0,  106,  112,  108,  111,  109,  110,    0,    0,    0,
  107,  105,    0,  106,  112,  108,  111,    0,  110,    0,
    0,    0,    0,   30,   55,    0,   73,   55,  111,    0,
  110,    0,   99,  100,    0,  113,  101,  102,  103,  104,
   54,    0,   55,   54,   99,  100,    0,  113,  101,  102,
  103,  104,    0,    0,   75,    0,    0,    0,   54,  113,
   73,    0,    0,    0,    0,    0,    0,    0,   99,  100,
    0,    0,  101,  102,  103,  104,   55,    0,    0,   99,
  100,    0,    0,  101,  102,  103,  104,    0,   75,    0,
    0,    0,   54,    0,    0,   47,    0,   47,   47,   47,
   99,  100,    0,    0,  101,  102,  103,  104,   92,   46,
    0,   47,    0,   47,   47,    0,   47,    0,   53,    0,
   55,   56,   57,    0,   73,    0,   73,   58,    0,    0,
    0,    0,    0,    0,    0,    0,   99,  100,    0,    0,
  101,  102,  103,  104,   73,   73,   46,   47,   47,    0,
   73,    0,   75,    0,   75,   53,    0,   55,   56,   57,
    0,    0,   99,  100,   58,    0,  101,  102,  103,  104,
    0,    0,   75,   75,    0,    0,    0,   48,   75,   48,
   48,   48,    0,   44,   44,    0,    0,   44,   44,   44,
   44,    0,   46,    0,   47,   48,   48,    0,   48,    0,
    0,   53,    0,   55,   56,   57,    0,    0,    0,    0,
   58,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   99,    0,    0,    0,  101,  102,  103,  104,   48,
    0,    0,    0,    0,    0,    0,    0,  101,  102,  103,
  104,    0,    0,    0,    0,    0,    0,    0,    0,  101,
  102,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   55,   55,   82,    0,    0,    0,   55,   55,    0,    0,
   90,   91,   93,    0,    0,    0,   54,   54,    0,    0,
    0,    0,   54,   54,    0,    0,    0,    0,    0,  115,
    0,  117,    0,    0,    0,    0,    0,  120,    0,    0,
  124,    0,    0,    0,    0,    0,    0,    0,    0,  127,
  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
  138,  139,  140,    0,  141,    0,    0,    0,    0,    0,
  147,   47,   47,    0,    0,   47,   47,   47,   47,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  120,    0,  156,    0,    0,    0,  159,
    0,    0,  161,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   48,   48,    0,    0,   48,   48,   48,
   48,
=======
public final static short DOUBLE=262;
public final static short NULL=263;
public final static short EXTENDS=264;
public final static short THIS=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short IF=268;
public final static short ELSE=269;
public final static short RETURN=270;
public final static short BREAK=271;
public final static short NEW=272;
public final static short PRINT=273;
public final static short READ_INTEGER=274;
public final static short READ_LINE=275;
public final static short LITERAL=276;
public final static short IDENTIFIER=277;
public final static short AND=278;
public final static short OR=279;
public final static short STATIC=280;
public final static short REPEAT=281;
public final static short UNTIL=282;
public final static short LESS_EQUAL=283;
public final static short GREATER_EQUAL=284;
public final static short EQUAL=285;
public final static short NOT_EQUAL=286;
public final static short UMINUS=287;
public final static short EMPTY=288;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    1,    3,    4,    5,    5,    5,    5,    5,
    5,    5,    2,    6,    6,    7,    7,    7,    9,    9,
   10,   10,    8,    8,   11,   12,   12,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   14,   14,   14,
   25,   25,   22,   22,   24,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   27,   27,   26,   26,   28,   28,   16,   17,   18,   21,
   15,   29,   29,   19,   19,   20,
};
final static short yylen[] = {                            2,
    1,    2,    1,    2,    2,    1,    1,    1,    1,    1,
    2,    3,    6,    2,    0,    2,    2,    0,    1,    0,
    3,    1,    7,    6,    3,    2,    0,    1,    2,    1,
    1,    2,    1,    2,    2,    2,    1,    3,    1,    0,
    2,    0,    2,    4,    5,    1,    1,    1,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    2,    2,    3,    3,    1,    4,    5,    5,
    1,    1,    1,    0,    3,    1,    5,    6,    9,    1,
    6,    2,    0,    2,    1,    4,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    3,    0,    2,    0,    0,   14,   18,
    0,    7,    8,    6,   10,    0,    9,    0,   13,   16,
    0,    0,   17,   11,    0,    4,    0,    0,    0,    0,
   12,    0,   22,    0,    0,    0,    0,    5,    0,    0,
    0,   27,   24,   21,   23,    0,   72,   67,    0,    0,
    0,    0,   80,    0,    0,    0,    0,   71,    0,    0,
    0,    0,   25,   28,   37,   26,    0,   30,   31,    0,
   33,    0,    0,    0,    0,    0,    0,    0,   48,    0,
    0,    0,   46,    0,   47,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   29,   32,   34,   35,   36,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   65,   66,    0,    0,   62,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   68,    0,
    0,   86,    0,    0,   44,    0,    0,   77,    0,    0,
   69,    0,    0,   70,   45,    0,    0,   81,   78,    0,
   82,    0,   79,
};
final static short yydgoto[] = {                          2,
    3,    4,   64,   21,   34,    8,   11,   23,   35,   36,
   65,   46,   66,   67,   68,   69,   70,   71,   72,   73,
   74,   83,   76,   85,   78,  156,   79,  124,  168,
};
final static short yysindex[] = {                      -253,
 -241,    0, -253,    0, -226,    0, -230,  -68,    0,    0,
  523,    0,    0,    0,    0, -229,    0, -174,    0,    0,
    2,  -88,    0,    0,  -86,    0,   26,  -26,   30, -174,
    0, -174,    0,  -71,   33,   31,   40,    0,  -22, -174,
  -22,    0,    0,    0,    0,  326,    0,    0,   70,   80,
   83,   -3,    0,  431,   85,   86,   89,    0,  355,   -3,
   -3,  601,    0,    0,    0,    0,   77,    0,    0,   78,
    0,   95,   99,  102,  104,  438,    0, -131,    0,   -3,
   -3,   -3,    0,  438,    0,  123,   76,   -3,  129,  130,
 -110,  -42,  -42, -101,  106,    0,    0,    0,    0,    0,
   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
   -3,   -3,   -3,   -3,    0,   -3,  140,  132,  124,  262,
  141,  639,  438,  -19,    0,    0,  145,  146,    0,  438,
  491,  470,  640,  640,  512,  512,  163,  163,  -42,  -42,
  -42,  640,  640,  359,   -3,  355,   -3,  355,    0,  383,
   -3,    0,   -3,   -3,    0,  147,  151,    0,  156,  -73,
    0,  438,  417,    0,    0,   -3,  355,    0,    0,  166,
    0,  355,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,  204,    0,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  149,    0,    0,  171,
    0,  171,    0,    0,    0,  172,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -58,    0,    0,    0,    0,
    0,  -57,    0,    0,    0,    0,    0,    0,  -58,  -63,
  -63,  -63,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  459,    0,   -2,    0,    0,  -63,
  -58,  -63,    0,  158,    0,    0,    0,  -63,    0,    0,
    0,    9,   35,    0,    0,    0,    0,    0,    0,    0,
  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
  -63,  -63,  -63,  -63,    0,  -63,  -28,    0,    0,    0,
    0,  -63,  -17,    0,    0,    0,    0,    0,    0,  -30,
   91,  285,   52,  284,  565,  606,  427,  611,   62,   71,
   97,  450,  483,    0,  -31,  -58,  -63,  -58,    0,    0,
  -63,    0,  -63,  -63,    0,    0,  180,    0,    0,  -33,
    0,   18,    0,    0,    0,  -18,  -58,    0,    0,    0,
    0,  -58,    0,
};
final static short yygindex[] = {                         0,
    0,  219,  220,   87,   10,    0,    0,    0,  213,    0,
   59,    0,   14,  -75,    0,    0,    0,    0,    0,    0,
    0,  668,  839,  740,    0,    0,    0,  107,    0,
};
final static int YYTABLESIZE=993;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         83,
   40,   85,   28,  115,   28,  119,   83,    1,   43,   74,
   38,   83,   43,   43,   43,   43,   43,   43,   43,   28,
   22,  152,   40,   76,  151,   83,   76,   25,   38,   61,
   43,   43,   43,   43,   47,    5,   62,    7,   39,   47,
   47,   60,   47,   47,   47,   63,    9,   24,  116,   63,
   63,   63,   63,   63,   10,   63,   39,   47,   75,   47,
   26,   75,   43,   87,   43,   30,   31,   63,   63,   32,
   63,   64,   91,   39,   40,   64,   64,   64,   64,   64,
   41,   64,   12,   13,   14,   15,   16,   17,   47,   83,
  170,   83,   58,   64,   64,   58,   64,   43,   51,   45,
   42,   63,   51,   51,   51,   51,   51,   52,   51,   80,
   58,   52,   52,   52,   52,   52,   33,   52,   33,   81,
   51,   51,   82,   51,   88,   89,   44,   64,   90,   52,
   52,   60,   52,   53,   60,   96,   97,   53,   53,   53,
   53,   53,  112,   53,   58,  117,  129,  110,  108,   60,
  109,  115,  111,   98,   51,   53,   53,   99,   53,  158,
  100,  160,  121,   52,  101,  114,  122,  113,  112,  125,
  126,  127,  146,  110,  108,  128,  109,  115,  111,  145,
  171,  149,  147,   60,  153,  173,  154,  165,   27,   53,
   29,  114,  112,  113,  151,  167,  116,  110,  108,  112,
  109,  115,  111,    1,  110,   38,  172,    5,  115,  111,
   15,   20,   19,   42,  166,  114,   84,  113,   42,   42,
   73,    6,  116,   83,   83,   83,   83,   83,   83,   83,
   20,   83,   83,   83,   83,    0,   83,   83,   83,   83,
   83,   83,   83,   83,   37,   42,  116,   83,   83,   43,
   43,  157,    0,  116,   43,   43,   43,   43,   42,   47,
    0,   48,    0,    0,    0,    0,    0,    0,   54,    0,
   56,   57,   58,    0,    0,   47,   47,    0,    0,    0,
   47,   47,   47,   47,    0,    0,   63,   63,    0,    0,
    0,   63,   63,   63,   63,    0,    0,    0,  112,    0,
    0,    0,  148,  110,  108,    0,  109,  115,  111,    0,
    0,    0,   64,   64,    0,    0,    0,   64,   64,   64,
   64,  114,    0,  113,   59,   61,    0,   59,   61,   58,
   58,    0,    0,    0,    0,    0,   58,   58,    0,   51,
   51,    0,   59,   61,   51,   51,   51,   51,   52,   52,
    0,    0,  116,   52,   52,   52,   52,    0,   61,    0,
    0,    0,    0,    0,    0,   62,    0,    0,   60,   60,
   60,    0,    0,    0,   53,   53,   59,   61,    0,   53,
   53,   53,   53,  102,  103,    0,    0,   61,  104,  105,
  106,  107,    0,    0,   62,  112,    0,    0,    0,   60,
  110,  108,    0,  109,  115,  111,    0,    0,    0,  102,
  103,    0,    0,    0,  104,  105,  106,  107,  114,  112,
  113,    0,    0,    0,  110,  108,    0,  109,  115,  111,
    0,    0,    0,  102,  103,    0,    0,    0,  104,  105,
  106,  107,  114,    0,  113,    0,    0,    0,   42,  116,
   63,  155,    0,  112,    0,    0,    0,  169,  110,  108,
    0,  109,  115,  111,    0,    0,    0,   49,    0,   49,
   49,   49,    0,  116,  112,  161,  114,   42,  113,  110,
  108,    0,  109,  115,  111,   49,   49,    0,   49,    0,
   57,    0,    0,   57,    0,   46,    0,  114,    0,  113,
   46,   46,    0,   46,   46,   46,  112,  116,   57,    0,
    0,  110,  108,    0,  109,  115,  111,    0,   46,   49,
   46,    0,    0,   56,    0,    0,   56,  112,  116,  114,
    0,  113,  110,  108,    0,  109,  115,  111,    0,  102,
  103,   56,   57,    0,  104,  105,  106,  107,  112,   46,
  114,    0,  113,  110,  108,    0,  109,  115,  111,    0,
  116,   59,   59,   61,    0,    0,    0,    0,   59,   59,
    0,  114,    0,  113,    0,   56,    0,    0,    0,    0,
    0,  116,   12,   13,   14,   15,   16,   17,   47,    0,
   48,   49,   50,   51,    0,   52,   53,   54,   55,   56,
   57,   58,  116,    0,    0,   54,   59,    0,   54,    0,
    0,   12,   13,   14,   15,   16,   17,   47,    0,   48,
   49,   50,   51,   54,   52,   53,   54,   55,   56,   57,
   58,    0,    0,   61,    0,   59,  102,  103,    0,    0,
   62,  104,  105,  106,  107,   60,   55,   19,    0,   55,
    0,   50,    0,   50,   50,   50,    0,   54,    0,    0,
  102,  103,    0,    0,   55,  104,  105,  106,  107,   50,
   50,   61,   50,    0,    0,    0,  112,    0,   62,    0,
    0,  110,  108,   60,  109,  115,  111,   12,   13,   14,
   15,   16,   17,    0,  102,  103,    0,    0,   55,  104,
  105,  106,  107,   50,   49,   49,    0,   86,    0,   49,
   49,   49,   49,   75,    0,  102,  103,    0,    0,    0,
  104,  105,  106,  107,    0,    0,   75,   57,   57,    0,
  116,   31,    0,    0,   57,   57,   46,   46,    0,    0,
    0,   46,   46,   46,   46,    0,    0,  102,   75,    0,
    0,    0,  104,  105,  106,  107,    0,    0,    0,    0,
   56,   56,    0,    0,    0,    0,    0,   56,   56,    0,
    0,    0,    0,  104,  105,  106,  107,    0,    0,   12,
   13,   14,   15,   16,   17,   77,    0,    0,    0,    0,
    0,    0,    0,    0,  104,  105,    0,    0,   77,    0,
    0,    0,   18,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   75,    0,   75,    0,    0,    0,    0,
   77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   75,   75,    0,    0,    0,    0,   75,
    0,    0,   54,   54,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   94,    0,   47,    0,   48,    0,    0,    0,    0,
    0,    0,   54,    0,   56,   57,   58,    0,    0,    0,
    0,    0,    0,   55,   55,   77,    0,   77,   50,   50,
   84,    0,    0,   50,   50,   50,   50,    0,   92,   93,
   95,   47,    0,   48,    0,   77,   77,    0,    0,    0,
   54,   77,   56,   57,   58,    0,    0,    0,  118,    0,
  120,    0,    0,    0,    0,    0,  123,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  130,
  131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
  141,  142,  143,    0,  144,    0,    0,    0,    0,    0,
  150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  123,    0,  159,    0,    0,    0,  162,
    0,  163,  164,
>>>>>>> PA2
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         33,
<<<<<<< HEAD
   59,   59,   91,   91,   79,   91,   40,   46,   41,   41,
   41,   45,  143,  261,  145,   11,   41,   37,  276,   44,
  263,   17,   42,   33,  276,   59,   46,   47,   59,   41,
   40,   37,   44,  164,   59,   45,   42,   43,  169,   45,
   46,   47,  257,  258,  259,  260,  261,   33,  125,   38,
   41,   40,   91,   44,   40,  123,   37,   53,  276,   45,
   41,   42,   43,   44,   45,   46,   47,   41,   93,   41,
   44,   91,   44,  257,  258,  259,  260,  261,   59,   60,
   61,   62,   59,   41,   40,   91,   44,   59,  163,  123,
   93,  125,  276,   40,   37,   29,   41,   31,   41,   42,
   43,   59,   45,   46,   47,   39,   44,  123,   41,   40,
   91,   40,   93,  123,   40,  125,   59,   60,   37,   62,
   40,   93,   41,   42,   43,   44,   45,   40,   47,   40,
   40,   59,   59,  276,   59,   93,   59,  123,   91,   41,
   59,   60,   44,   62,   61,   37,   40,  276,   91,   41,
   42,   43,   44,   45,   37,   47,   41,   59,   41,   42,
   43,   44,   45,   41,   47,   40,   59,   59,   60,   41,
   62,   41,  276,   41,   93,   44,   59,   60,  268,   62,
  257,  258,  259,  260,  261,   41,   41,  276,  276,   37,
  276,   93,    0,   41,   42,   43,   44,   45,   59,   47,
   41,   93,  279,   41,  276,  123,   59,   41,    3,   11,
   93,   59,   60,   31,   62,   -1,   41,  276,  276,   44,
  142,   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,
  264,  265,  266,  267,   59,  269,  270,  271,  272,  273,
  274,  275,  276,  276,  276,   93,  280,  257,  258,  259,
  260,  261,  262,  278,  264,  265,  266,  267,   -1,  269,
  270,  271,  272,  273,  274,  275,   -1,   -1,   93,   -1,
  280,  257,  258,  259,  260,  261,  262,   -1,  264,  265,
  266,  267,   -1,  269,  270,  271,  272,  273,  274,  275,
   -1,   -1,   -1,   -1,  280,   -1,  277,  278,   -1,   -1,
  281,  282,  283,  284,   37,  277,  278,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,  277,
  278,   -1,   -1,   -1,   -1,   -1,   59,   60,   41,   62,
   -1,   44,   -1,   -1,  277,  278,   -1,   -1,  281,  282,
  283,  284,   -1,   37,   -1,   -1,   59,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,  277,  278,
   93,   -1,  281,  282,  283,  284,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,   -1,
   93,  283,  284,   -1,   -1,  277,  278,   -1,   -1,  281,
  282,  283,  284,   -1,  277,  278,   -1,   91,  281,  282,
  283,  284,   37,   -1,   -1,   -1,   41,   42,   43,   -1,
   45,   46,   47,   -1,   37,   -1,   -1,   -1,   41,   42,
   43,   -1,   45,   46,   47,   60,   -1,   62,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,   60,   37,   62,
   -1,   -1,   -1,   42,   43,   44,   45,   46,   47,   37,
   -1,   -1,  277,  278,   42,   43,   91,   45,   46,   47,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   91,   -1,
   37,   -1,   60,   -1,   62,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   33,   -1,   91,   60,   -1,   62,   -1,   40,   -1,   -1,
   -1,   -1,   45,   91,   -1,   93,   37,   -1,   -1,   -1,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   93,   33,   59,   60,
   -1,   62,   37,   -1,   40,   -1,   -1,   42,   43,   45,
   45,   46,   47,   -1,  277,  278,   -1,   -1,  281,  282,
  283,  284,   -1,   37,   -1,   60,   -1,   62,   42,   43,
   91,   45,   46,   47,  277,  278,   -1,   -1,   -1,   -1,
  283,  284,   -1,   33,   -1,   -1,   60,   -1,   62,   -1,
   40,   -1,   -1,  277,  278,   45,   91,  281,  282,  283,
  284,   37,   -1,   -1,   -1,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   37,   -1,   -1,   -1,   91,   42,   43,
   -1,   45,   46,   47,   60,   37,   62,   -1,   -1,   -1,
   42,   43,   -1,   45,   46,   47,   60,   -1,   62,   -1,
   -1,   -1,   -1,   93,   41,   -1,   45,   44,   60,   -1,
   62,   -1,  277,  278,   -1,   91,  281,  282,  283,  284,
   41,   -1,   59,   44,  277,  278,   -1,   91,  281,  282,
  283,  284,   -1,   -1,   45,   -1,   -1,   -1,   59,   91,
   79,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,  278,
   -1,   -1,  281,  282,  283,  284,   93,   -1,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,   -1,   79,   -1,
   -1,   -1,   93,   -1,   -1,   41,   -1,   43,   44,   45,
  277,  278,   -1,   -1,  281,  282,  283,  284,  261,  262,
   -1,  264,   -1,   59,   60,   -1,   62,   -1,  271,   -1,
  273,  274,  275,   -1,  143,   -1,  145,  280,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,
  281,  282,  283,  284,  163,  164,  262,   93,  264,   -1,
  169,   -1,  143,   -1,  145,  271,   -1,  273,  274,  275,
   -1,   -1,  277,  278,  280,   -1,  281,  282,  283,  284,
   -1,   -1,  163,  164,   -1,   -1,   -1,   41,  169,   43,
   44,   45,   -1,  277,  278,   -1,   -1,  281,  282,  283,
  284,   -1,  262,   -1,  264,   59,   60,   -1,   62,   -1,
   -1,  271,   -1,  273,  274,  275,   -1,   -1,   -1,   -1,
  280,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  277,   -1,   -1,   -1,  281,  282,  283,  284,   93,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  281,  282,  283,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  281,
  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  277,  278,   51,   -1,   -1,   -1,  283,  284,   -1,   -1,
   59,   60,   61,   -1,   -1,   -1,  277,  278,   -1,   -1,
   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,   -1,   78,
   -1,   80,   -1,   -1,   -1,   -1,   -1,   86,   -1,   -1,
   89,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   98,
   99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
  109,  110,  111,   -1,  113,   -1,   -1,   -1,   -1,   -1,
  119,  277,  278,   -1,   -1,  281,  282,  283,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  142,   -1,  144,   -1,   -1,   -1,  148,
   -1,   -1,  151,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,  283,
  284,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=286;
=======
   59,   59,   91,   46,   91,   81,   40,  261,   37,   41,
   41,   45,   41,   42,   43,   44,   45,   46,   47,   91,
   11,   41,   41,   41,   44,   59,   44,   18,   59,   33,
   59,   60,   61,   62,   37,  277,   40,  264,   41,   42,
   43,   45,   45,   46,   47,   37,  277,  277,   91,   41,
   42,   43,   44,   45,  123,   47,   59,   60,   41,   62,
   59,   44,   91,   54,   93,   40,   93,   59,   60,   40,
   62,   37,   59,   41,   44,   41,   42,   43,   44,   45,
   41,   47,  257,  258,  259,  260,  261,  262,   91,  123,
  166,  125,   41,   59,   60,   44,   62,   39,   37,   41,
  123,   93,   41,   42,   43,   44,   45,   37,   47,   40,
   59,   41,   42,   43,   44,   45,   30,   47,   32,   40,
   59,   60,   40,   62,   40,   40,   40,   93,   40,   59,
   60,   41,   62,   37,   44,   59,   59,   41,   42,   43,
   44,   45,   37,   47,   93,  277,   41,   42,   43,   59,
   45,   46,   47,   59,   93,   59,   60,   59,   62,  146,
   59,  148,   40,   93,   61,   60,   91,   62,   37,   41,
   41,  282,   41,   42,   43,  277,   45,   46,   47,   40,
  167,   41,   59,   93,   40,  172,   41,   41,  277,   93,
  277,   60,   37,   62,   44,  269,   91,   42,   43,   37,
   45,   46,   47,    0,   42,  277,   41,   59,   46,   47,
  123,   41,   41,  277,   59,   60,   59,   62,  277,  277,
   41,    3,   91,  257,  258,  259,  260,  261,  262,  263,
   11,  265,  266,  267,  268,   -1,  270,  271,  272,  273,
  274,  275,  276,  277,   32,  277,   91,  281,  282,  278,
  279,  145,   -1,   91,  283,  284,  285,  286,  277,  263,
   -1,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,
  274,  275,  276,   -1,   -1,  278,  279,   -1,   -1,   -1,
  283,  284,  285,  286,   -1,   -1,  278,  279,   -1,   -1,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   37,   -1,
   -1,   -1,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,  278,  279,   -1,   -1,   -1,  283,  284,  285,
  286,   60,   -1,   62,   41,   41,   -1,   44,   44,  278,
  279,   -1,   -1,   -1,   -1,   -1,  285,  286,   -1,  278,
  279,   -1,   59,   59,  283,  284,  285,  286,  278,  279,
   -1,   -1,   91,  283,  284,  285,  286,   -1,   33,   -1,
   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,  278,  279,
   45,   -1,   -1,   -1,  278,  279,   93,   93,   -1,  283,
  284,  285,  286,  278,  279,   -1,   -1,   33,  283,  284,
  285,  286,   -1,   -1,   40,   37,   -1,   -1,   -1,   45,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,  278,
  279,   -1,   -1,   -1,  283,  284,  285,  286,   60,   37,
   62,   -1,   -1,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,  278,  279,   -1,   -1,   -1,  283,  284,
  285,  286,   60,   -1,   62,   -1,   -1,   -1,  123,   91,
  125,   93,   -1,   37,   -1,   -1,   -1,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   41,   -1,   43,
   44,   45,   -1,   91,   37,   93,   60,  123,   62,   42,
   43,   -1,   45,   46,   47,   59,   60,   -1,   62,   -1,
   41,   -1,   -1,   44,   -1,   37,   -1,   60,   -1,   62,
   42,   43,   -1,   45,   46,   47,   37,   91,   59,   -1,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   60,   93,
   62,   -1,   -1,   41,   -1,   -1,   44,   37,   91,   60,
   -1,   62,   42,   43,   -1,   45,   46,   47,   -1,  278,
  279,   59,   93,   -1,  283,  284,  285,  286,   37,   91,
   60,   -1,   62,   42,   43,   -1,   45,   46,   47,   -1,
   91,  278,  279,  279,   -1,   -1,   -1,   -1,  285,  286,
   -1,   60,   -1,   62,   -1,   93,   -1,   -1,   -1,   -1,
   -1,   91,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,   -1,  270,  271,  272,  273,  274,
  275,  276,   91,   -1,   -1,   41,  281,   -1,   44,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,   59,  270,  271,  272,  273,  274,  275,
  276,   -1,   -1,   33,   -1,  281,  278,  279,   -1,   -1,
   40,  283,  284,  285,  286,   45,   41,  125,   -1,   44,
   -1,   41,   -1,   43,   44,   45,   -1,   93,   -1,   -1,
  278,  279,   -1,   -1,   59,  283,  284,  285,  286,   59,
   60,   33,   62,   -1,   -1,   -1,   37,   -1,   40,   -1,
   -1,   42,   43,   45,   45,   46,   47,  257,  258,  259,
  260,  261,  262,   -1,  278,  279,   -1,   -1,   93,  283,
  284,  285,  286,   93,  278,  279,   -1,  277,   -1,  283,
  284,  285,  286,   46,   -1,  278,  279,   -1,   -1,   -1,
  283,  284,  285,  286,   -1,   -1,   59,  278,  279,   -1,
   91,   93,   -1,   -1,  285,  286,  278,  279,   -1,   -1,
   -1,  283,  284,  285,  286,   -1,   -1,  278,   81,   -1,
   -1,   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,
  278,  279,   -1,   -1,   -1,   -1,   -1,  285,  286,   -1,
   -1,   -1,   -1,  283,  284,  285,  286,   -1,   -1,  257,
  258,  259,  260,  261,  262,   46,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  283,  284,   -1,   -1,   59,   -1,
   -1,   -1,  280,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  146,   -1,  148,   -1,   -1,   -1,   -1,
   81,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  166,  167,   -1,   -1,   -1,   -1,  172,
   -1,   -1,  278,  279,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  261,   -1,  263,   -1,  265,   -1,   -1,   -1,   -1,
   -1,   -1,  272,   -1,  274,  275,  276,   -1,   -1,   -1,
   -1,   -1,   -1,  278,  279,  146,   -1,  148,  278,  279,
   52,   -1,   -1,  283,  284,  285,  286,   -1,   60,   61,
   62,  263,   -1,  265,   -1,  166,  167,   -1,   -1,   -1,
  272,  172,  274,  275,  276,   -1,   -1,   -1,   80,   -1,
   82,   -1,   -1,   -1,   -1,   -1,   88,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  101,
  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
  112,  113,  114,   -1,  116,   -1,   -1,   -1,   -1,   -1,
  122,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  145,   -1,  147,   -1,   -1,   -1,  151,
   -1,  153,  154,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=288;
>>>>>>> PA2
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'",null,null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,
"';'","'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"VOID","BOOL","INT","STRING",
<<<<<<< HEAD
"CLASS","NULL","EXTENDS","THIS","WHILE","FOR","IF","ELSE","RETURN","BREAK",
"NEW","PRINT","READ_INTEGER","READ_LINE","LITERAL","IDENTIFIER","AND","OR",
"STATIC","INSTANCEOF","LESS_EQUAL","GREATER_EQUAL","EQUAL","NOT_EQUAL","UMINUS",
"EMPTY",
=======
"CLASS","DOUBLE","NULL","EXTENDS","THIS","WHILE","FOR","IF","ELSE","RETURN",
"BREAK","NEW","PRINT","READ_INTEGER","READ_LINE","LITERAL","IDENTIFIER","AND",
"OR","STATIC","REPEAT","UNTIL","LESS_EQUAL","GREATER_EQUAL","EQUAL","NOT_EQUAL",
"UMINUS","EMPTY",
>>>>>>> PA2
};
final static String yyrule[] = {
"$accept : Program",
"Program : ClassList",
"ClassList : ClassList ClassDef",
"ClassList : ClassDef",
"VariableDef : Variable ';'",
"Variable : Type IDENTIFIER",
"Type : INT",
"Type : VOID",
"Type : BOOL",
<<<<<<< HEAD
=======
"Type : DOUBLE",
>>>>>>> PA2
"Type : STRING",
"Type : CLASS IDENTIFIER",
"Type : Type '[' ']'",
"ClassDef : CLASS IDENTIFIER ExtendsClause '{' FieldList '}'",
"ExtendsClause : EXTENDS IDENTIFIER",
"ExtendsClause :",
"FieldList : FieldList VariableDef",
"FieldList : FieldList FunctionDef",
"FieldList :",
"Formals : VariableList",
"Formals :",
"VariableList : VariableList ',' Variable",
"VariableList : Variable",
"FunctionDef : STATIC Type IDENTIFIER '(' Formals ')' StmtBlock",
"FunctionDef : Type IDENTIFIER '(' Formals ')' StmtBlock",
"StmtBlock : '{' StmtList '}'",
"StmtList : StmtList Stmt",
"StmtList :",
"Stmt : VariableDef",
"Stmt : SimpleStmt ';'",
"Stmt : IfStmt",
"Stmt : WhileStmt",
<<<<<<< HEAD
=======
"Stmt : RepeatStmt ';'",
>>>>>>> PA2
"Stmt : ForStmt",
"Stmt : ReturnStmt ';'",
"Stmt : PrintStmt ';'",
"Stmt : BreakStmt ';'",
"Stmt : StmtBlock",
"SimpleStmt : LValue '=' Expr",
"SimpleStmt : Call",
"SimpleStmt :",
"Receiver : Expr '.'",
"Receiver :",
"LValue : Receiver IDENTIFIER",
"LValue : Expr '[' Expr ']'",
"Call : Receiver IDENTIFIER '(' Actuals ')'",
"Expr : LValue",
"Expr : Call",
"Expr : Constant",
"Expr : Expr '+' Expr",
"Expr : Expr '-' Expr",
"Expr : Expr '*' Expr",
"Expr : Expr '/' Expr",
"Expr : Expr '%' Expr",
"Expr : Expr EQUAL Expr",
"Expr : Expr NOT_EQUAL Expr",
"Expr : Expr '<' Expr",
"Expr : Expr '>' Expr",
"Expr : Expr LESS_EQUAL Expr",
"Expr : Expr GREATER_EQUAL Expr",
"Expr : Expr AND Expr",
"Expr : Expr OR Expr",
"Expr : '(' Expr ')'",
"Expr : '-' Expr",
"Expr : '!' Expr",
"Expr : READ_INTEGER '(' ')'",
"Expr : READ_LINE '(' ')'",
"Expr : THIS",
"Expr : NEW IDENTIFIER '(' ')'",
"Expr : NEW Type '[' Expr ']'",
<<<<<<< HEAD
"Expr : INSTANCEOF '(' Expr ',' IDENTIFIER ')'",
=======
>>>>>>> PA2
"Expr : '(' CLASS IDENTIFIER ')' Expr",
"Constant : LITERAL",
"Constant : NULL",
"Actuals : ExprList",
"Actuals :",
"ExprList : ExprList ',' Expr",
"ExprList : Expr",
"WhileStmt : WHILE '(' Expr ')' Stmt",
<<<<<<< HEAD
=======
"RepeatStmt : REPEAT Stmt UNTIL '(' Expr ')'",
>>>>>>> PA2
"ForStmt : FOR '(' SimpleStmt ';' Expr ';' SimpleStmt ')' Stmt",
"BreakStmt : BREAK",
"IfStmt : IF '(' Expr ')' Stmt ElseClause",
"ElseClause : ELSE Stmt",
"ElseClause :",
"ReturnStmt : RETURN Expr",
"ReturnStmt : RETURN",
"PrintStmt : PRINT '(' ExprList ')'",
};

<<<<<<< HEAD
//#line 423 "Parser.y"
=======
//#line 431 "Parser.y"
>>>>>>> PA2
    
	/**
	 * 打印当前归约所用的语法规则<br>
	 * 请勿修改。
	 */
    public boolean onReduce(String rule) {
		if (rule.startsWith("$$"))
			return false;
		else
			rule = rule.replaceAll(" \\$\\$\\d+", "");

   	    if (rule.endsWith(":"))
    	    System.out.println(rule + " <empty>");
   	    else
			System.out.println(rule);
		return false;
    }
    
    public void diagnose() {
		addReduceListener(this);
		yyparse();
	}
<<<<<<< HEAD
//#line 581 "Parser.java"
=======
//#line 580 "Parser.java"
>>>>>>> PA2
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    //if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      //if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        //if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        //if (yychar < 0)    //it it didn't work/error
        //  {
        //  yychar = 0;      //change it to default string (no -1!)
          //if (yydebug)
          //  yylexdebug(yystate,yychar);
        //  }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        //if (yydebug)
          //debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      //if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0 || valptr<0)   //check for under & overflow here
            {
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            //if (yydebug)
              //debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            //if (yydebug)
              //debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0 || valptr<0)   //check for under & overflow here
              {
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        //if (yydebug)
          //{
          //yys = null;
          //if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          //if (yys == null) yys = "illegal-symbol";
          //debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          //}
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    //if (yydebug)
      //debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    if (reduceListener == null || reduceListener.onReduce(yyrule[yyn])) // if intercepted!
      switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
<<<<<<< HEAD
//#line 52 "Parser.y"
=======
//#line 53 "Parser.y"
>>>>>>> PA2
{
						tree = new Tree.TopLevel(val_peek(0).clist, val_peek(0).loc);
					}
break;
case 2:
<<<<<<< HEAD
//#line 58 "Parser.y"
=======
//#line 59 "Parser.y"
>>>>>>> PA2
{
						yyval.clist.add(val_peek(0).cdef);
					}
break;
case 3:
<<<<<<< HEAD
//#line 62 "Parser.y"
=======
//#line 63 "Parser.y"
>>>>>>> PA2
{
                		yyval.clist = new ArrayList<Tree.ClassDef>();
                		yyval.clist.add(val_peek(0).cdef);
                	}
break;
case 5:
<<<<<<< HEAD
//#line 72 "Parser.y"
=======
//#line 73 "Parser.y"
>>>>>>> PA2
{
						yyval.vdef = new Tree.VarDef(val_peek(0).ident, val_peek(1).type, val_peek(0).loc);
					}
break;
case 6:
<<<<<<< HEAD
//#line 78 "Parser.y"
=======
//#line 79 "Parser.y"
>>>>>>> PA2
{
						yyval.type = new Tree.TypeIdent(Tree.INT, val_peek(0).loc);
					}
break;
case 7:
<<<<<<< HEAD
//#line 82 "Parser.y"
=======
//#line 83 "Parser.y"
>>>>>>> PA2
{
                		yyval.type = new Tree.TypeIdent(Tree.VOID, val_peek(0).loc);
                	}
break;
case 8:
<<<<<<< HEAD
//#line 86 "Parser.y"
=======
//#line 87 "Parser.y"
>>>>>>> PA2
{
                		yyval.type = new Tree.TypeIdent(Tree.BOOL, val_peek(0).loc);
                	}
break;
case 9:
<<<<<<< HEAD
//#line 90 "Parser.y"
=======
//#line 91 "Parser.y"
{
						yyval.type = new Tree.TypeIdent(Tree.DOUBLE ,val_peek(0). loc);
					}
break;
case 10:
//#line 95 "Parser.y"
>>>>>>> PA2
{
                		yyval.type = new Tree.TypeIdent(Tree.STRING, val_peek(0).loc);
                	}
break;
<<<<<<< HEAD
case 10:
//#line 94 "Parser.y"
=======
case 11:
//#line 99 "Parser.y"
>>>>>>> PA2
{
                		yyval.type = new Tree.TypeClass(val_peek(0).ident, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 11:
//#line 98 "Parser.y"
=======
case 12:
//#line 103 "Parser.y"
>>>>>>> PA2
{
                		yyval.type = new Tree.TypeArray(val_peek(2).type, val_peek(2).loc);
                	}
break;
<<<<<<< HEAD
case 12:
//#line 104 "Parser.y"
=======
case 13:
//#line 109 "Parser.y"
>>>>>>> PA2
{
						yyval.cdef = new Tree.ClassDef(val_peek(4).ident, val_peek(3).ident, val_peek(1).flist, val_peek(5).loc);
					}
break;
<<<<<<< HEAD
case 13:
//#line 110 "Parser.y"
=======
case 14:
//#line 115 "Parser.y"
>>>>>>> PA2
{
						yyval.ident = val_peek(0).ident;
					}
break;
<<<<<<< HEAD
case 14:
//#line 114 "Parser.y"
=======
case 15:
//#line 119 "Parser.y"
>>>>>>> PA2
{
                		yyval = new SemValue();
                	}
break;
<<<<<<< HEAD
case 15:
//#line 120 "Parser.y"
=======
case 16:
//#line 125 "Parser.y"
>>>>>>> PA2
{
						yyval.flist.add(val_peek(0).vdef);
					}
break;
<<<<<<< HEAD
case 16:
//#line 124 "Parser.y"
=======
case 17:
//#line 129 "Parser.y"
>>>>>>> PA2
{
						yyval.flist.add(val_peek(0).fdef);
					}
break;
<<<<<<< HEAD
case 17:
//#line 128 "Parser.y"
=======
case 18:
//#line 133 "Parser.y"
>>>>>>> PA2
{
                		yyval = new SemValue();
                		yyval.flist = new ArrayList<Tree>();
                	}
break;
<<<<<<< HEAD
case 19:
//#line 136 "Parser.y"
=======
case 20:
//#line 141 "Parser.y"
>>>>>>> PA2
{
                		yyval = new SemValue();
                		yyval.vlist = new ArrayList<Tree.VarDef>(); 
                	}
break;
<<<<<<< HEAD
case 20:
//#line 143 "Parser.y"
=======
case 21:
//#line 148 "Parser.y"
>>>>>>> PA2
{
						yyval.vlist.add(val_peek(0).vdef);
					}
break;
<<<<<<< HEAD
case 21:
//#line 147 "Parser.y"
=======
case 22:
//#line 152 "Parser.y"
>>>>>>> PA2
{
                		yyval.vlist = new ArrayList<Tree.VarDef>();
						yyval.vlist.add(val_peek(0).vdef);
                	}
break;
<<<<<<< HEAD
case 22:
//#line 154 "Parser.y"
=======
case 23:
//#line 159 "Parser.y"
>>>>>>> PA2
{
						yyval.fdef = new MethodDef(true, val_peek(4).ident, val_peek(5).type, val_peek(2).vlist, (Block) val_peek(0).stmt, val_peek(4).loc);
					}
break;
<<<<<<< HEAD
case 23:
//#line 158 "Parser.y"
=======
case 24:
//#line 163 "Parser.y"
>>>>>>> PA2
{
						yyval.fdef = new MethodDef(false, val_peek(4).ident, val_peek(5).type, val_peek(2).vlist, (Block) val_peek(0).stmt, val_peek(4).loc);
					}
break;
<<<<<<< HEAD
case 24:
//#line 164 "Parser.y"
=======
case 25:
//#line 169 "Parser.y"
>>>>>>> PA2
{
						yyval.stmt = new Block(val_peek(1).slist, val_peek(2).loc);
					}
break;
<<<<<<< HEAD
case 25:
//#line 170 "Parser.y"
=======
case 26:
//#line 175 "Parser.y"
>>>>>>> PA2
{
						yyval.slist.add(val_peek(0).stmt);
					}
break;
<<<<<<< HEAD
case 26:
//#line 174 "Parser.y"
=======
case 27:
//#line 179 "Parser.y"
>>>>>>> PA2
{
                		yyval = new SemValue();
                		yyval.slist = new ArrayList<Tree>();
                	}
break;
<<<<<<< HEAD
case 27:
//#line 181 "Parser.y"
=======
case 28:
//#line 186 "Parser.y"
>>>>>>> PA2
{
						yyval.stmt = val_peek(0).vdef;
					}
break;
<<<<<<< HEAD
case 28:
//#line 186 "Parser.y"
=======
case 29:
//#line 191 "Parser.y"
>>>>>>> PA2
{
                		if (yyval.stmt == null) {
                			yyval.stmt = new Tree.Skip(val_peek(0).loc);
                		}
                	}
break;
<<<<<<< HEAD
case 36:
//#line 201 "Parser.y"
=======
case 38:
//#line 207 "Parser.y"
>>>>>>> PA2
{
						yyval.stmt = new Tree.Assign(val_peek(2).lvalue, val_peek(0).expr, val_peek(1).loc);
					}
break;
<<<<<<< HEAD
case 37:
//#line 205 "Parser.y"
=======
case 39:
//#line 211 "Parser.y"
>>>>>>> PA2
{
                		yyval.stmt = new Tree.Exec(val_peek(0).expr, val_peek(0).loc);
                	}
break;
<<<<<<< HEAD
case 38:
//#line 209 "Parser.y"
=======
case 40:
//#line 215 "Parser.y"
>>>>>>> PA2
{
                		yyval = new SemValue();
                	}
break;
<<<<<<< HEAD
case 40:
//#line 216 "Parser.y"
=======
case 42:
//#line 222 "Parser.y"
>>>>>>> PA2
{
                		yyval = new SemValue();
                	}
break;
<<<<<<< HEAD
case 41:
//#line 222 "Parser.y"
=======
case 43:
//#line 228 "Parser.y"
>>>>>>> PA2
{
						yyval.lvalue = new Tree.Ident(val_peek(1).expr, val_peek(0).ident, val_peek(0).loc);
						if (val_peek(1).loc == null) {
							yyval.loc = val_peek(0).loc;
						}
					}
break;
<<<<<<< HEAD
case 42:
//#line 229 "Parser.y"
=======
case 44:
//#line 235 "Parser.y"
>>>>>>> PA2
{
                		yyval.lvalue = new Tree.Indexed(val_peek(3).expr, val_peek(1).expr, val_peek(3).loc);
                	}
break;
<<<<<<< HEAD
case 43:
//#line 235 "Parser.y"
=======
case 45:
//#line 241 "Parser.y"
>>>>>>> PA2
{
						yyval.expr = new Tree.CallExpr(val_peek(4).expr, val_peek(3).ident, val_peek(1).elist, val_peek(3).loc);
						if (val_peek(4).loc == null) {
							yyval.loc = val_peek(3).loc;
						}
					}
break;
<<<<<<< HEAD
case 44:
//#line 244 "Parser.y"
=======
case 46:
//#line 250 "Parser.y"
>>>>>>> PA2
{
						yyval.expr = val_peek(0).lvalue;
					}
break;
<<<<<<< HEAD
case 47:
//#line 250 "Parser.y"
=======
case 49:
//#line 256 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.PLUS, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 48:
//#line 254 "Parser.y"
=======
case 50:
//#line 260 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.MINUS, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 49:
//#line 258 "Parser.y"
=======
case 51:
//#line 264 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.MUL, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 50:
//#line 262 "Parser.y"
=======
case 52:
//#line 268 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.DIV, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 51:
//#line 266 "Parser.y"
=======
case 53:
//#line 272 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.MOD, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 52:
//#line 270 "Parser.y"
=======
case 54:
//#line 276 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.EQ, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 53:
//#line 274 "Parser.y"
=======
case 55:
//#line 280 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.NE, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 54:
//#line 278 "Parser.y"
=======
case 56:
//#line 284 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.LT, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 55:
//#line 282 "Parser.y"
=======
case 57:
//#line 288 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.GT, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 56:
//#line 286 "Parser.y"
=======
case 58:
//#line 292 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.LE, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 57:
//#line 290 "Parser.y"
=======
case 59:
//#line 296 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.GE, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 58:
//#line 294 "Parser.y"
=======
case 60:
//#line 300 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.AND, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 59:
//#line 298 "Parser.y"
=======
case 61:
//#line 304 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Binary(Tree.OR, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 60:
//#line 302 "Parser.y"
=======
case 62:
//#line 308 "Parser.y"
>>>>>>> PA2
{
                		yyval = val_peek(1);
                	}
break;
<<<<<<< HEAD
case 61:
//#line 306 "Parser.y"
=======
case 63:
//#line 312 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Unary(Tree.NEG, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 62:
//#line 310 "Parser.y"
=======
case 64:
//#line 316 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.Unary(Tree.NOT, val_peek(0).expr, val_peek(1).loc);
                	}
break;
<<<<<<< HEAD
case 63:
//#line 314 "Parser.y"
=======
case 65:
//#line 320 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.ReadIntExpr(val_peek(2).loc);
                	}
break;
<<<<<<< HEAD
case 64:
//#line 318 "Parser.y"
=======
case 66:
//#line 324 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.ReadLineExpr(val_peek(2).loc);
                	}
break;
<<<<<<< HEAD
case 65:
//#line 322 "Parser.y"
=======
case 67:
//#line 328 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.ThisExpr(val_peek(0).loc);
                	}
break;
<<<<<<< HEAD
case 66:
//#line 326 "Parser.y"
=======
case 68:
//#line 332 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.NewClass(val_peek(2).ident, val_peek(3).loc);
                	}
break;
<<<<<<< HEAD
case 67:
//#line 330 "Parser.y"
=======
case 69:
//#line 336 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.NewArray(val_peek(3).type, val_peek(1).expr, val_peek(4).loc);
                	}
break;
<<<<<<< HEAD
case 68:
//#line 334 "Parser.y"
{
                		yyval.expr = new Tree.TypeTest(val_peek(3).expr, val_peek(1).ident, val_peek(5).loc);
                	}
break;
case 69:
//#line 338 "Parser.y"
=======
case 70:
//#line 340 "Parser.y"
>>>>>>> PA2
{
                		yyval.expr = new Tree.TypeCast(val_peek(2).ident, val_peek(0).expr, val_peek(0).loc);
                	}
break;
<<<<<<< HEAD
case 70:
//#line 344 "Parser.y"
=======
case 71:
//#line 346 "Parser.y"
>>>>>>> PA2
{
						yyval.expr = new Tree.Literal(val_peek(0).typeTag, val_peek(0).literal, val_peek(0).loc);
					}
break;
<<<<<<< HEAD
case 71:
//#line 348 "Parser.y"
=======
case 72:
//#line 350 "Parser.y"
>>>>>>> PA2
{
						yyval.expr = new Null(val_peek(0).loc);
					}
break;
<<<<<<< HEAD
case 73:
//#line 355 "Parser.y"
=======
case 74:
//#line 357 "Parser.y"
>>>>>>> PA2
{
                		yyval = new SemValue();
                		yyval.elist = new ArrayList<Tree.Expr>();
                	}
break;
<<<<<<< HEAD
case 74:
//#line 362 "Parser.y"
=======
case 75:
//#line 364 "Parser.y"
>>>>>>> PA2
{
						yyval.elist.add(val_peek(0).expr);
					}
break;
<<<<<<< HEAD
case 75:
//#line 366 "Parser.y"
=======
case 76:
//#line 368 "Parser.y"
>>>>>>> PA2
{
                		yyval.elist = new ArrayList<Tree.Expr>();
						yyval.elist.add(val_peek(0).expr);
                	}
break;
<<<<<<< HEAD
case 76:
//#line 373 "Parser.y"
=======
case 77:
//#line 375 "Parser.y"
>>>>>>> PA2
{
						yyval.stmt = new Tree.WhileLoop(val_peek(2).expr, val_peek(0).stmt, val_peek(4).loc);
					}
break;
<<<<<<< HEAD
case 77:
//#line 379 "Parser.y"
=======
case 78:
//#line 381 "Parser.y"
{
						yyval.stmt = new Tree.RepeatLoop(val_peek(1).expr, val_peek(4).stmt, val_peek(5).loc);
					}
break;
case 79:
//#line 387 "Parser.y"
>>>>>>> PA2
{
						yyval.stmt = new Tree.ForLoop(val_peek(6).stmt, val_peek(4).expr, val_peek(2).stmt, val_peek(0).stmt, val_peek(8).loc);
					}
break;
<<<<<<< HEAD
case 78:
//#line 385 "Parser.y"
=======
case 80:
//#line 393 "Parser.y"
>>>>>>> PA2
{
						yyval.stmt = new Tree.Break(val_peek(0).loc);
					}
break;
<<<<<<< HEAD
case 79:
//#line 391 "Parser.y"
=======
case 81:
//#line 399 "Parser.y"
>>>>>>> PA2
{
						yyval.stmt = new Tree.If(val_peek(3).expr, val_peek(1).stmt, val_peek(0).stmt, val_peek(5).loc);
					}
break;
<<<<<<< HEAD
case 80:
//#line 397 "Parser.y"
=======
case 82:
//#line 405 "Parser.y"
>>>>>>> PA2
{
						yyval.stmt = val_peek(0).stmt;
					}
break;
<<<<<<< HEAD
case 81:
//#line 401 "Parser.y"
=======
case 83:
//#line 409 "Parser.y"
>>>>>>> PA2
{
						yyval = new SemValue();
					}
break;
<<<<<<< HEAD
case 82:
//#line 407 "Parser.y"
=======
case 84:
//#line 415 "Parser.y"
>>>>>>> PA2
{
						yyval.stmt = new Tree.Return(val_peek(0).expr, val_peek(1).loc);
					}
break;
<<<<<<< HEAD
case 83:
//#line 411 "Parser.y"
=======
case 85:
//#line 419 "Parser.y"
>>>>>>> PA2
{
                		yyval.stmt = new Tree.Return(null, val_peek(0).loc);
                	}
break;
<<<<<<< HEAD
case 84:
//#line 417 "Parser.y"
=======
case 86:
//#line 425 "Parser.y"
>>>>>>> PA2
{
						yyval.stmt = new Print(val_peek(1).elist, val_peek(3).loc);
					}
break;
<<<<<<< HEAD
//#line 1168 "Parser.java"
=======
//#line 1173 "Parser.java"
>>>>>>> PA2
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    //if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      //if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        //if (yychar<0) yychar=0;  //clean, if necessary
        //if (yydebug)
          //yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      //if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
//## The -Jnorun option was used ##
//## end of method run() ########################################



//## Constructors ###############################################
//## The -Jnoconstruct option was used ##
//###############################################################



}
//################### END OF CLASS ##############################
